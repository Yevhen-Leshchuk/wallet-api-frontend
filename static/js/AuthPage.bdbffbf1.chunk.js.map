{"version":3,"file":"static/js/AuthPage.bdbffbf1.chunk.js","mappings":"8PACA,EAAsH,0BAAtH,EAA0J,0BAA1J,EAA+L,2BAA/L,EAA2S,uBAA3S,EAA0U,wBAA1U,EAA0W,wBAA1W,EAAkZ,sDAAlZ,EAAsd,8BAAtd,EAAigB,yDAAjgB,EAAkkB,wBAAlkB,EAA0mB,sD,UCQpmBA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,EAAAA,KACPI,IAAI,EAAG,uDACPF,SAAS,cAGRG,EAAgB,CACpBJ,MAAO,GACPE,SAAU,IAmFZ,EAhFiB,WACf,OAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAWxB,OACE,iBAAKE,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKC,UAAS,UAAKC,EAAAA,EAAL,mBAIlB,SAAC,KAAD,CACEZ,cAAeA,EACfN,iBAAkBA,EAClBmB,SApBW,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACX,aAAXb,EACFE,EAASY,EAAAA,GAAAA,SAAwBF,IACb,UAAXZ,GACTE,EAASY,EAAAA,GAAAA,MAAqBF,IAEhCC,KAWE,UAKE,UAAC,KAAD,CAAMN,UAAWC,EAAQO,YAAU,EAAnC,WACE,kBAAOR,UAAWC,EAASQ,QAASZ,EAApC,iHAGA,SAAC,KAAD,CACEG,UAAWC,EACXS,KAAK,QACLC,KAAK,QACLC,YAAY,iBACZC,GAAIhB,KAEN,cAAGG,UAAWC,EAAd,UACE,SAAC,KAAD,CAAcU,KAAK,aAGrB,kBAAOX,UAAWC,EAASQ,QAASV,EAApC,mDAGA,SAAC,KAAD,CACEC,UAAWC,EACXS,KAAK,WACLC,KAAK,WACLC,YAAY,uCACZC,GAAId,KAEN,cAAGC,UAAWC,EAAd,UACE,SAAC,KAAD,CAAcU,KAAK,gBAErB,4BACE,mBACED,KAAK,SACLV,UAAWC,EACXa,QAAS,kBAAMpB,EAAU,UAH3B,6CAQA,mBACEgB,KAAK,SACLV,UAAWC,EACXa,QAAS,kBAAMpB,EAAU,aAH3B,4F,6ECtFZ,EAAsH,0BAAtH,EAAmK,mCAAnK,EAAyN,mCCczN,EAXiB,WACf,OACE,iBAAKM,UAAWC,EAAhB,WACE,SAAC,EAAD,KACA,gBAAKD,UAAWC,EAAhB,UACE,gBAAKc,IAAKC,EAAShB,UAAWC,EAAoBgB,IAAI","sources":["webpack://wallet-api-frontend/./src/components/AuthForm/AuthForm.module.scss?f2e9","components/AuthForm/AuthForm.jsx","webpack://wallet-api-frontend/./src/pages/AuthPage/AuthPage.module.scss?4f00","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"visually-hidden\":\"AuthForm_visually-hidden__P1wfE\",\"container\":\"AuthForm_container__NDy2x\",\"formBox\":\"AuthForm_formBox__vszFu\",\"logoBox\":\"AuthForm_logoBox__uiXPO\",\"logoIcon\":\"AuthForm_logoIcon__JjaPA\",\"btnText\":\"AuthForm_btnText__ZJo8b\",\"authText\":\"AuthForm_authText__vcjku\",\"form\":\"AuthForm_form__kV4hH\",\"label\":\"AuthForm_label__V3SH5\",\"input\":\"AuthForm_input__sMieH\",\"inputPassword\":\"AuthForm_inputPassword__oIT1S AuthForm_input__sMieH\",\"buttonEnter\":\"AuthForm_buttonEnter__fj7N1\",\"buttonAuth\":\"AuthForm_buttonAuth__cXTG8 AuthForm_buttonEnter__fj7N1\",\"error\":\"AuthForm_error__8Ni+8\",\"errorPassword\":\"AuthForm_errorPassword__CQOuE AuthForm_error__8Ni+8\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth';\nimport sprite from '../../images/svg/sprite.svg';\nimport s from './AuthForm.module.scss';\n\nconst validationSchema = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(8, 'password\" length must be at least 8 characters long')\n    .required('Required'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst AuthForm = () => {\n  const [action, setAction] = useState('');\n\n  const dispatch = useDispatch();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const onSubmit = (values, { resetForm }) => {\n    if (action === 'register') {\n      dispatch(authOperations.register(values));\n    } else if (action === 'login') {\n      dispatch(authOperations.logIn(values));\n    }\n    resetForm();\n  };\n\n  return (\n    <div className={s.formBox}>\n      <div className={s.logoBox}>\n        <svg className={s.logoIcon}>\n          <use xlinkHref={`${sprite}#cabbage`} />\n        </svg>\n      </div>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className={s.form} noValidate>\n          <label className={s.label} htmlFor={emailInputId}>\n            Электронная почта:\n          </label>\n          <Field\n            className={s.input}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"your@email.com\"\n            id={emailInputId}\n          />\n          <p className={s.error}>\n            <ErrorMessage name=\"email\" />\n          </p>\n\n          <label className={s.label} htmlFor={passwordInputId}>\n            Пароль\n          </label>\n          <Field\n            className={s.inputPassword}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Пароль\"\n            id={passwordInputId}\n          />\n          <p className={s.errorPassword}>\n            <ErrorMessage name=\"password\" />\n          </p>\n          <div>\n            <button\n              type=\"submit\"\n              className={s.buttonEnter}\n              onClick={() => setAction('login')}\n            >\n              Войти\n            </button>\n\n            <button\n              type=\"submit\"\n              className={s.buttonAuth}\n              onClick={() => setAction('register')}\n            >\n              Регистрация\n            </button>\n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"visually-hidden\":\"AuthPage_visually-hidden__jL5Sh\",\"container\":\"AuthPage_container__ETBQG\",\"authBox\":\"AuthPage_authBox__tYVaS\",\"doubleCabbageBox\":\"AuthPage_doubleCabbageBox__IY3gg\",\"doubleCabbageImg\":\"AuthPage_doubleCabbageImg__A+H+7\"};","import AuthForm from 'components/AuthForm';\nimport Cabbage from '../../images/img/auth-page/auth_page-small_cabbage-tablet.png';\nimport s from './AuthPage.module.scss';\n\nconst AuthPage = () => {\n  return (\n    <div className={s.authBox}>\n      <AuthForm />\n      <div className={s.doubleCabbageBox}>\n        <img src={Cabbage} className={s.doubleCabbageImg} alt=\"Cabbage\" />\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"names":["validationSchema","Yup","email","required","password","min","initialValues","useState","action","setAction","dispatch","useDispatch","emailInputId","nanoid","passwordInputId","className","s","xlinkHref","sprite","onSubmit","values","resetForm","authOperations","noValidate","htmlFor","type","name","placeholder","id","onClick","src","Cabbage","alt"],"sourceRoot":""}